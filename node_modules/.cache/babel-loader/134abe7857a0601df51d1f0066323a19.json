{"ast":null,"code":"var _jsxFileName = \"/home/kemily/kemiflix/kemilyFlix/src/components/FormField/index.js\";\nimport React from \"react\";\nimport PropTypes from 'prop-types';\nimport styled, { css } from 'styled-components';\nconst FormFieldWrapper = styled.div`\n  position: relative;\n  textarea{\n    min-height: 150px;\n  }\n\n  input[type=\"color\"]{\n    padding-left: 56px;\n  }\n`;\nconst Label = styled.label`\n\n\n\n\n\n\n`;\nLabel.Text = styled.span`\n  \n\n`;\nconst Input = styled.input`\n  background: #53585D;\n  color: #f5f5f5;\n  display: block;\n  width: 100%;\n  height: 57px;\n  font-size: 18px;\n\n  outline: 0;\n  border: 0;\n  border-top: 4px solid transparent;\n  border-bottom: 4px solid #53585D;\n\n  padding: 16px 16px;\n  margin-bottom: 45px;\n\n  resize: none;\n  border-radius: 4px;\n  transition: border-color .3s;\n\n  $:focus{\n    border-bottom-color: var(--primary);\n  }\n\n  $:focus:not([type=\"color\"]) + span {\n    transform: scale(.6) translateY(-10px);\n  }\n\n  ${function ({\n  hasValue\n}) {\n  return hasValue && css`\n    $:not([type=\"color\"]) + span {\n      transform: scale(.6) translateY(-10px);\n    `;\n}}\n`;\n\nfunction FormField({\n  label,\n  type,\n  name,\n  value,\n  onChange\n}) {\n  const fieldId = `id_${name}`;\n  const isTextarea = type === 'textarea';\n  const Tag = isTextarea ? 'textarea' : 'input';\n  const hasValue = Boolean(value.length);\n  return /*#__PURE__*/React.createElement(FormFieldWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: fieldId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    as: Tag,\n    id: fieldId,\n    type: type,\n    value: value,\n    name: name,\n    hasValue: hasValue,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Label.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, label, \":\")));\n}\n\nFormField.defaultProps = {\n  type: 'text',\n  value: '',\n  onChange: () => {}\n};\nFormField.propTypes = {\n  label: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  onChange: PropTypes.func\n};\nexport default FormField;","map":{"version":3,"sources":["/home/kemily/kemiflix/kemilyFlix/src/components/FormField/index.js"],"names":["React","PropTypes","styled","css","FormFieldWrapper","div","Label","label","Text","span","Input","input","hasValue","FormField","type","name","value","onChange","fieldId","isTextarea","Tag","Boolean","length","defaultProps","propTypes","string","isRequired","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA2B,mBAA3B;AAEA,MAAMC,gBAAgB,GAAGF,MAAM,CAACG,GAAI;;;;;;;;;CAApC;AAWA,MAAMC,KAAK,GAAGJ,MAAM,CAACK,KAAM;;;;;;;CAA3B;AAQAD,KAAK,CAACE,IAAN,GAAaN,MAAM,CAACO,IAAK;;;CAAzB;AAKA,MAAMC,KAAK,GAAGR,MAAM,CAACS,KAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4BvB,UAAS;AAACC,EAAAA;AAAD,CAAT,EAAoB;AACpB,SAAOA,QAAQ,IAAIT,GAAI;;;KAAvB;AAID,CAAC;CAjCJ;;AAoCA,SAASU,SAAT,CAAmB;AAAEN,EAAAA,KAAF;AAASO,EAAAA,IAAT;AAAeC,EAAAA,IAAf;AAAqBC,EAAAA,KAArB;AAA4BC,EAAAA;AAA5B,CAAnB,EAA2D;AAGzD,QAAMC,OAAO,GAAI,MAAKH,IAAK,EAA3B;AACA,QAAMI,UAAU,GAAGL,IAAI,KAAK,UAA5B;AACA,QAAMM,GAAG,GAAGD,UAAU,GAAG,UAAH,GAAgB,OAAtC;AAEA,QAAMP,QAAQ,GAAGS,OAAO,CAAEL,KAAK,CAACM,MAAR,CAAxB;AACA,sBACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,OAAO,EAAEJ,OADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGE,oBAAC,KAAD;AACE,IAAA,EAAE,EAAEE,GADN;AAEE,IAAA,EAAE,EAAEF,OAFN;AAGE,IAAA,IAAI,EAAEJ,IAHR;AAIE,IAAA,KAAK,EAAEE,KAJT;AAKE,IAAA,IAAI,EAAED,IALR;AAME,IAAA,QAAQ,EAAEH,QANZ;AAOE,IAAA,QAAQ,EAAEK,QAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eAYE,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCV,KADD,MAZF,CADF,CADF;AAsBD;;AAEDM,SAAS,CAACU,YAAV,GAAwB;AACtBT,EAAAA,IAAI,EAAE,MADgB;AAEtBE,EAAAA,KAAK,EAAE,EAFe;AAGtBC,EAAAA,QAAQ,EAAE,MAAM,CAAE;AAHI,CAAxB;AAMAJ,SAAS,CAACW,SAAV,GAAsB;AACpBjB,EAAAA,KAAK,EAAEN,SAAS,CAACwB,MAAV,CAAiBC,UADJ;AAEpBZ,EAAAA,IAAI,EAAEb,SAAS,CAACwB,MAFI;AAGpBV,EAAAA,IAAI,EAAEd,SAAS,CAACwB,MAAV,CAAiBC,UAHH;AAIpBV,EAAAA,KAAK,EAAEf,SAAS,CAACwB,MAJG;AAKpBR,EAAAA,QAAQ,EAAEhB,SAAS,CAAC0B;AALA,CAAtB;AAQA,eAAed,SAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\nimport styled, { css }from 'styled-components';\n\nconst FormFieldWrapper = styled.div`\n  position: relative;\n  textarea{\n    min-height: 150px;\n  }\n\n  input[type=\"color\"]{\n    padding-left: 56px;\n  }\n`;\n\nconst Label = styled.label`\n\n\n\n\n\n\n`;\nLabel.Text = styled.span`\n  \n\n`;\n\nconst Input = styled.input`\n  background: #53585D;\n  color: #f5f5f5;\n  display: block;\n  width: 100%;\n  height: 57px;\n  font-size: 18px;\n\n  outline: 0;\n  border: 0;\n  border-top: 4px solid transparent;\n  border-bottom: 4px solid #53585D;\n\n  padding: 16px 16px;\n  margin-bottom: 45px;\n\n  resize: none;\n  border-radius: 4px;\n  transition: border-color .3s;\n\n  $:focus{\n    border-bottom-color: var(--primary);\n  }\n\n  $:focus:not([type=\"color\"]) + span {\n    transform: scale(.6) translateY(-10px);\n  }\n\n  ${function({hasValue}){\n    return hasValue && css`\n    $:not([type=\"color\"]) + span {\n      transform: scale(.6) translateY(-10px);\n    `;\n  }}\n`;\n\nfunction FormField({ label, type, name, value, onChange }) {\n\n\n  const fieldId = `id_${name}`;\n  const isTextarea = type === 'textarea';\n  const Tag = isTextarea ? 'textarea' : 'input';\n\n  const hasValue = Boolean (value.length);\n  return (\n    <FormFieldWrapper>\n      <Label\n        htmlFor={fieldId}\n      >\n        <Input\n          as={Tag}\n          id={fieldId}\n          type={type}\n          value={value}\n          name={name}\n          hasValue={hasValue}\n          onChange={onChange}\n        />\n        <Label.Text>\n        {label}\n        : \n        </Label.Text>\n        \n      </Label>\n    </FormFieldWrapper>\n  )\n}\n\nFormField.defaultProps ={\n  type: 'text',\n  value: '',\n  onChange: () => {},\n};\n\nFormField.propTypes = {\n  label: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default FormField;"]},"metadata":{},"sourceType":"module"}