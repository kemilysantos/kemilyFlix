{"ast":null,"code":"var _jsxFileName = \"/home/kemily/kemiflix/kemilyFlix/src/components/FormField/index.js\";\nimport React from \"react\";\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nconst FormFieldWrapper = styled.div`\n`;\nconst Label = styled.label`\n`;\nconst Input = styled.input`\n  background: #53585D;\n  color: #f5f5f5;\n  display: block;\n  width: 100%;\n  height: 57px;\n  font-size: 18px;\n\n  outline: 0;\n  border: 0;\n  border-top: 4px solid transparent;\n  border-bottom: 4px solid #53585D;\n\n  padding: 16px 16px;\n  margin-bottom: 45px;\n\n  resize: none;\n  border-radius: 4px;\n  transition: border-color\n\n\n\n\n`;\n\nfunction FormField({\n  label,\n  type,\n  name,\n  value,\n  onChange\n}) {\n  const fieldId = `id_${name}`;\n  const isTextarea = type === 'textarea';\n  const Tag = isTextarea ? 'textarea' : 'input';\n  return /*#__PURE__*/React.createElement(FormFieldWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: fieldId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, label, \":\", /*#__PURE__*/React.createElement(Input, {\n    as: Tag,\n    id: fieldId,\n    type: type,\n    value: value,\n    name: name,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  })));\n}\n\nFormField.defaultProps = {\n  type: 'text',\n  value: '',\n  onChange: () => {}\n};\nFormField.propTypes = {\n  label: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  onChange: PropTypes.func\n};\nexport default FormField;","map":{"version":3,"sources":["/home/kemily/kemiflix/kemilyFlix/src/components/FormField/index.js"],"names":["React","PropTypes","styled","FormFieldWrapper","div","Label","label","Input","input","FormField","type","name","value","onChange","fieldId","isTextarea","Tag","defaultProps","propTypes","string","isRequired","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,gBAAgB,GAAGD,MAAM,CAACE,GAAI;CAApC;AAGA,MAAMC,KAAK,GAAGH,MAAM,CAACI,KAAM;CAA3B;AAGA,MAAMC,KAAK,GAAGL,MAAM,CAACM,KAAM;;;;;;;;;;;;;;;;;;;;;;;CAA3B;;AAyBA,SAASC,SAAT,CAAmB;AAAEH,EAAAA,KAAF;AAASI,EAAAA,IAAT;AAAeC,EAAAA,IAAf;AAAqBC,EAAAA,KAArB;AAA4BC,EAAAA;AAA5B,CAAnB,EAA2D;AAGzD,QAAMC,OAAO,GAAI,MAAKH,IAAK,EAA3B;AACA,QAAMI,UAAU,GAAGL,IAAI,KAAK,UAA5B;AACA,QAAMM,GAAG,GAAGD,UAAU,GAAG,UAAH,GAAgB,OAAtC;AACA,sBACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,OAAO,EAAED,OADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGR,KAHH,oBAIE,oBAAC,KAAD;AACE,IAAA,EAAE,EAAEU,GADN;AAEE,IAAA,EAAE,EAAEF,OAFN;AAGE,IAAA,IAAI,EAAEJ,IAHR;AAIE,IAAA,KAAK,EAAEE,KAJT;AAKE,IAAA,IAAI,EAAED,IALR;AAME,IAAA,QAAQ,EAAEE,QANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF,CADF;AAiBD;;AAEDJ,SAAS,CAACQ,YAAV,GAAwB;AACtBP,EAAAA,IAAI,EAAE,MADgB;AAEtBE,EAAAA,KAAK,EAAE,EAFe;AAGtBC,EAAAA,QAAQ,EAAE,MAAM,CAAE;AAHI,CAAxB;AAMAJ,SAAS,CAACS,SAAV,GAAsB;AACpBZ,EAAAA,KAAK,EAAEL,SAAS,CAACkB,MAAV,CAAiBC,UADJ;AAEpBV,EAAAA,IAAI,EAAET,SAAS,CAACkB,MAFI;AAGpBR,EAAAA,IAAI,EAAEV,SAAS,CAACkB,MAAV,CAAiBC,UAHH;AAIpBR,EAAAA,KAAK,EAAEX,SAAS,CAACkB,MAJG;AAKpBN,EAAAA,QAAQ,EAAEZ,SAAS,CAACoB;AALA,CAAtB;AAQA,eAAeZ,SAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst FormFieldWrapper = styled.div`\n`;\n\nconst Label = styled.label`\n`;\n\nconst Input = styled.input`\n  background: #53585D;\n  color: #f5f5f5;\n  display: block;\n  width: 100%;\n  height: 57px;\n  font-size: 18px;\n\n  outline: 0;\n  border: 0;\n  border-top: 4px solid transparent;\n  border-bottom: 4px solid #53585D;\n\n  padding: 16px 16px;\n  margin-bottom: 45px;\n\n  resize: none;\n  border-radius: 4px;\n  transition: border-color\n\n\n\n\n`;\n\nfunction FormField({ label, type, name, value, onChange }) {\n\n\n  const fieldId = `id_${name}`;\n  const isTextarea = type === 'textarea';\n  const Tag = isTextarea ? 'textarea' : 'input';\n  return (\n    <FormFieldWrapper>\n      <Label\n        htmlFor={fieldId}\n      >\n        {label}: \n        <Input\n          as={Tag}\n          id={fieldId}\n          type={type}\n          value={value}\n          name={name}\n          onChange={onChange}\n        />\n      </Label>\n    </FormFieldWrapper>\n  )\n}\n\nFormField.defaultProps ={\n  type: 'text',\n  value: '',\n  onChange: () => {},\n};\n\nFormField.propTypes = {\n  label: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default FormField;"]},"metadata":{},"sourceType":"module"}