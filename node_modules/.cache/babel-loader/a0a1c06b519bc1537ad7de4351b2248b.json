{"ast":null,"code":"var _jsxFileName = \"/home/kemily/kemiflix/kemilyFlix/src/components/FormField/index.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled, { css } from 'styled-components';\nconst FormFieldWrapper = styled.div`\n  position: relative; \n  textarea {\n    min-height: 150px;\n  }\n  input[type=\"color\"] {\n    padding-left: 56px;\n  }\n`;\nconst Label = styled.label``;\nLabel.Text = styled.span`\n  color: #E5E5E5;\n  height: 57px;\n  position: absolute; \n  top: 0;\n  left: 16px;\n  \n  display: flex;\n  align-items: center;\n  \n  transform-origin: 0% 0%;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 300;\n  \n  transition: .1s ease-in-out;\n`;\nconst Input = styled.input`\n  background: #53585D;\n  color: #F5F5F5;\n  display: block;\n  width: 100%;\n  height: 57px;\n  font-size: 18px;\n  \n  outline: 0;\n  border: 0;\n  border-top: 4px solid transparent;\n  border-bottom: 4px solid #53585D;\n  \n  padding: 16px 16px;\n  margin-bottom: 45px;\n  \n  resize: none;\n  border-radius: 4px;\n  transition: border-color .3s;\n  \n  &:focus {\n    border-bottom-color: var(--primary);\n  }\n  &:focus:not([type=\"color\"]) + span {\n    transform: scale(.6) translateY(-10px);\n  }\n  ${({\n  hasValue\n}) => hasValue && css`\n    &:not([type=\"color\"]) + span {\n      transform: scale(.6) translateY(-10px);\n    }\n  `}\n`;\n\nfunction FormField({\n  label,\n  type,\n  name,\n  value,\n  onChange,\n  suggestions\n}) {\n  const fieldId = `id_${name}`;\n  const isTypeTextarea = type === 'textarea';\n  const tag = isTypeTextarea ? 'textarea' : 'input';\n  const hasValue = Boolean(value.length);\n  const hasSuggestions = Boolean(suggestions.length);\n  return /*#__PURE__*/React.createElement(FormFieldWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: fieldId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    as: tag,\n    id: fieldId,\n    type: type,\n    value: value,\n    name: name,\n    hasValue: hasValue,\n    onChange: onChange,\n    autoComplete: hasSuggestions ? 'off' : 'on',\n    list: hasSuggestions ? `suggestionFor_${fieldId}` : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Label.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, label, \":\"), hasSuggestions && /*#__PURE__*/React.createElement(\"datalist\", {\n    id: `suggestionFor_${fieldId}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, suggestions.map(suggestion => /*#__PURE__*/React.createElement(\"option\", {\n    value: suggestion,\n    key: `suggestionFor_${fieldId}_option${suggestion}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, suggestion)))));\n}\n\nFormField.defaultProps = {\n  type: 'text',\n  value: '',\n  onChange: () => {},\n  suggestions: []\n};\nFormField.propTypes = {\n  label: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  suggestions: PropTypes.arrayOf(PropTypes.string)\n};\nexport default FormField;","map":{"version":3,"sources":["/home/kemily/kemiflix/kemilyFlix/src/components/FormField/index.js"],"names":["React","PropTypes","styled","css","FormFieldWrapper","div","Label","label","Text","span","Input","input","hasValue","FormField","type","name","value","onChange","suggestions","fieldId","isTypeTextarea","tag","Boolean","length","hasSuggestions","undefined","map","suggestion","defaultProps","propTypes","string","isRequired","func","arrayOf"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled, { css } from 'styled-components';\n\nconst FormFieldWrapper = styled.div`\n  position: relative; \n  textarea {\n    min-height: 150px;\n  }\n  input[type=\"color\"] {\n    padding-left: 56px;\n  }\n`;\n\nconst Label = styled.label``;\nLabel.Text = styled.span`\n  color: #E5E5E5;\n  height: 57px;\n  position: absolute; \n  top: 0;\n  left: 16px;\n  \n  display: flex;\n  align-items: center;\n  \n  transform-origin: 0% 0%;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 300;\n  \n  transition: .1s ease-in-out;\n`;\n\nconst Input = styled.input`\n  background: #53585D;\n  color: #F5F5F5;\n  display: block;\n  width: 100%;\n  height: 57px;\n  font-size: 18px;\n  \n  outline: 0;\n  border: 0;\n  border-top: 4px solid transparent;\n  border-bottom: 4px solid #53585D;\n  \n  padding: 16px 16px;\n  margin-bottom: 45px;\n  \n  resize: none;\n  border-radius: 4px;\n  transition: border-color .3s;\n  \n  &:focus {\n    border-bottom-color: var(--primary);\n  }\n  &:focus:not([type=\"color\"]) + span {\n    transform: scale(.6) translateY(-10px);\n  }\n  ${({ hasValue }) => hasValue && css`\n    &:not([type=\"color\"]) + span {\n      transform: scale(.6) translateY(-10px);\n    }\n  `}\n`;\n\nfunction FormField({\n  label, type, name, value, onChange, suggestions,\n}) {\n  const fieldId = `id_${name}`;\n  const isTypeTextarea = type === 'textarea';\n  const tag = isTypeTextarea ? 'textarea' : 'input';\n\n  const hasValue = Boolean(value.length);\n  const hasSuggestions = Boolean(suggestions.length);\n\n  return (\n    <FormFieldWrapper>\n      <Label\n        htmlFor={fieldId}\n      >\n        <Input\n          as={tag}\n          id={fieldId}\n          type={type}\n          value={value}\n          name={name}\n          hasValue={hasValue}\n          onChange={onChange}\n          autoComplete={hasSuggestions ? 'off' : 'on'}\n          list={hasSuggestions ? `suggestionFor_${fieldId}` : undefined}\n        />\n        <Label.Text>\n          {label}\n          :\n        </Label.Text>\n        {\n          hasSuggestions && (\n            <datalist id={`suggestionFor_${fieldId}`}>\n              {\n              suggestions.map((suggestion) => (\n                <option value={suggestion} key={`suggestionFor_${fieldId}_option${suggestion}`}>\n                  {suggestion}\n                </option>\n              ))\n            }\n            </datalist>\n          )\n        }\n\n      </Label>\n    </FormFieldWrapper>\n  );\n}\n\nFormField.defaultProps = {\n  type: 'text',\n  value: '',\n  onChange: () => {},\n  suggestions: [],\n};\n\nFormField.propTypes = {\n  label: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  suggestions: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default FormField;"]},"metadata":{},"sourceType":"module"}